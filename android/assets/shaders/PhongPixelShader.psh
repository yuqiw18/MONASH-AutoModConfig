//This pixel shader implements a simple version of the Phong shading model
//It only supports one Directional light and an ambient colour
//See: http://en.wikipedia.org/wiki/Phong_reflection_model for more info

//Pixel Shader Globals
sampler2D tex0 : register(s0);

float4 ambientColour;
float specularPower;

struct PS_INPUT
{
	float4 Position : POSITION;
	float2 TexCoord : TEXCOORD0;
	float3 Normal : TEXCOORD1;
	float3 LightDir : TEXCOORD2;
	float3 ViewDir : TEXCOORD3;
};

struct PS_OUTPUT
{
	float4 Colour: COLOR0;
};

PS_OUTPUT ps_main(in PS_INPUT In)
{
	PS_OUTPUT Output;

	float4 textureColour = tex2D(tex0, In.TexCoord);				//Look up the texture colour
	float diffuse = clamp(dot(In.Normal, In.LightDir), 0.0, 1.0);	//Diffuse Scalar, based on the angle between the light and the Normal. 
																	//The more parallel they are, the closer to 1 the scalar will be.

	float3 Reflect = normalize(2 * diffuse * In.Normal - In.LightDir);	//The Vector of Reflection, calculated according to the phong model
																		
	float4 specular = pow(saturate(dot(Reflect, In.ViewDir)), specularPower);		//The specular colour is based on the angle between the vector of 
																						//reflection and the direction of view. The more parallel they are the 
																						//closer to 1,1,1,1 the specular colour will be. This value is then 
																						//raised to the power of 8 to enhance the effect.

	Output.Colour = saturate(ambientColour + (textureColour * diffuse) + specular);	//The final colour is made up of the ambient colour as a base, followed by 
																					//the textureColour scaled by the diffuse, finally the specular colour is 
																					//added.

	return Output;
}